version: 2.1

orbs:
  nx: nrwl/nx@1.6.1
  aws-cli: circleci/aws-cli@3.1.5

commands:
  build-docker:
    parameters:
      tag:
        type: string
    steps:
      - run: echo << parameters.tag >>

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: cimg/node:18.16.0

yarn_cache: &yarn_cache
  keys:
    - v6-dependency-cache-{{ checksum "yarn.lock" }}
    # fallback to using the latest cache if no exact match is found
    - node-deps-node

deploy_cache: &deploy_cache
  key: last-deploy-sha

yarn_install: &yarn_install
  name: Install Dependencies
  command: yarn install --frozen-lockfile

jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *yarn_cache
      - run: rm -rf node_modules
      - run:
          <<: *yarn_install
      - nx/set-shas:
          allow-on-hold-workflow: true
          error-on-no-successful-workflow: true
          main-branch-name: develop
      - save_cache:
          key: v6-dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
            - node_modules
  lint:
    <<: *defaults
    steps:
      - checkout
      - nx/set-shas:
          allow-on-hold-workflow: true
          error-on-no-successful-workflow: true
          main-branch-name: develop
      - restore_cache:
          <<: *deploy_cache
      - restore_cache:
          <<: *yarn_cache
      - run: yarn nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint --parallel=3
  build-app:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - restore_cache:
          <<: *yarn_cache
      - run:
          name: Run build
          command: yarn nx run server:build
      - save_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - dist
      - store_artifacts:
          path: dist
  build-image:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - restore_cache:
          <<: *yarn_cache
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - aws-cli/setup:
          profile-name: ecr-df
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION --profile ecr-df | docker login --username AWS --password-stdin $ECR_ENDPOINT
            docker build -t vrai-server .
            mkdir -p docker-cache
            docker tag vrai-server:latest ${ECR_ENDPOINT}/vrai-server:${TAG_VERSION}
            docker push ${ECR_ENDPOINT}/vrai-server:${TAG_VERSION}
      - save_cache:
          key: last-deploy-sha
          paths:
            - dist

  deploy-development:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: ecr-df
      - build-docker:
          tag: development
      - run: |
          aws --profile=ecr-df ecs update-service --cluster vra-server-cluster-dev --service vrai-server-dev-service --force-new-deployment

  deploy-staging:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: ecr-df
      - build-docker:
          tag: staging
      - run: |
          aws --profile=ecr-df ecs update-service --cluster vra-server-cluster-dev --service vrai-server-staging --force-new-deployment

  deploy-production:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: ecr-df
      - build-docker:
          tag: production
      - run: |
          aws --profile=ecr-df ecs update-service --cluster vra-server-cluster-dev --service vrai-server-production --force-new-deployment

workflows:
  build-test-deploy:
    jobs:
      - install
      - lint:
          requires:
            - install
      - build-app:
          requires:
            - lint
      - build-image:
          requires:
            - build-app
          filters:
            branches:
              only:
                - develop
      - deploy-development:
          filters:
            branches:
              only:
                - develop
          requires:
            - build-image
      - manual-approval:
          type: approval
          requires:
            - deploy-development
      - deploy-staging:
          requires:
            - manual-approval
      - deploy-production:
          filters:
            branches:
              only:
                - main
